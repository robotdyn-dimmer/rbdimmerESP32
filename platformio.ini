; PlatformIO Project Configuration File for rbdimmerESP32
; 
; This is a comprehensive example showing various ESP32 board configurations
; with the rbdimmerESP32 library. Choose the environment that matches your board
; or create a custom one based on these examples.
;
; Build and upload: pio run -t upload -e esp32dev
; Serial monitor: pio run -t monitor -e esp32dev
;
; Documentation: https://docs.platformio.org/page/projectconf.html
; Library: https://github.com/robotdyn-dimmer/rbdimmerESP32
; Support: https://www.rbdimmer.com/forum

; ============================================================================
; Global project settings applied to all environments
; ============================================================================
[platformio]
; Default environment to build/upload if none specified
default_envs = esp32dev

; Directory for project source files
src_dir = src

; Shared data directory for all environments
data_dir = data

; Directory for compiled files
build_dir = .pio/build

; Directory for library dependencies
lib_dir = .pio/libdeps

; ============================================================================
; Common settings shared between all environments
; These can be inherited using 'extends = env:common'
; ============================================================================
[env]
; Framework for all ESP32 boards
framework = arduino

; Platform version (optional, remove for latest)
platform = espressif32@6.4.0

; Common build flags for optimization and warnings
build_flags = 
    ; Compiler optimization level (2 = optimize for speed)
    -O2
    
    ; Enable all compiler warnings
    -Wall
    -Wextra
    
    ; ESP32 specific optimizations
    -DCORE_DEBUG_LEVEL=0
    
    ; Define board has built-in LED (optional)
    -DLED_BUILTIN=2
    
    ; RBDimmer specific flags (optional overrides)
    ; -DRBDIMMER_MAX_CHANNELS=4
    ; -DRBDIMMER_MAX_PHASES=1
    ; -DRBDIMMER_DEBUG_LOG=1

; Library dependencies
; Can specify version, git repo, or local path
lib_deps = 
    ; RBDimmer library from GitHub (recommended)
    https://github.com/robotdyn-dimmer/rbdimmerESP32.git
    
    ; Or from PlatformIO registry (when published)
    ; rbdimmerESP32
    
    ; Or from local path for development
    ; file://../path/to/rbdimmerESP32
    
    ; Additional libraries if needed
    ; adafruit/Adafruit NeoPixel@^1.11.0

; Serial monitor settings
monitor_speed = 115200
monitor_filters = 
    ; Add timestamp to serial output
    time
    
    ; Colorize output for better readability
    colorize
    
    ; Decode ESP32 crash dumps
    esp32_exception_decoder

; Upload settings
upload_speed = 921600

; ============================================================================
; ESP32 Dev Module - Most common generic ESP32 board
; ============================================================================
[env:esp32dev]
board = esp32dev

; Board-specific build flags
build_flags = 
    ${env.build_flags}
    ; Define board type for conditional compilation
    -DBOARD_ESP32DEV
    
    ; Memory optimization for generic ESP32
    -DBOARD_HAS_PSRAM=0

; Partition scheme for larger applications
board_build.partitions = default.csv

; ============================================================================
; ESP32-WROOM-32 - Popular ESP32 module
; ============================================================================
[env:esp32-wroom]
board = esp32dev
board_build.mcu = esp32

build_flags = 
    ${env.build_flags}
    -DBOARD_ESP32_WROOM

; Custom partition table for OTA support
board_build.partitions = min_spiffs.csv

; ============================================================================
; ESP32-S3 DevKit - Newer ESP32-S3 with USB support
; ============================================================================
[env:esp32s3]
board = esp32-s3-devkitc-1

; ESP32-S3 specific settings
board_build.mcu = esp32s3
board_build.f_cpu = 240000000L

build_flags = 
    ${env.build_flags}
    -DBOARD_ESP32S3
    ; USB CDC serial port
    -DARDUINO_USB_CDC_ON_BOOT=1
    -DARDUINO_USB_MODE=1

; Use built-in USB for upload
upload_mode = usb-cdc
monitor_rts = 0
monitor_dtr = 0

; ============================================================================
; ESP32-C3 - RISC-V based ESP32
; ============================================================================
[env:esp32c3]
board = esp32-c3-devkitm-1

build_flags = 
    ${env.build_flags}
    -DBOARD_ESP32C3

; ESP32-C3 uses USB serial converter
monitor_rts = 0
monitor_dtr = 0

; ============================================================================
; Wemos D1 Mini ESP32 - Popular small form factor board
; ============================================================================
[env:wemos_d1_mini32]
board = wemos_d1_mini32

build_flags = 
    ${env.build_flags}
    -DBOARD_WEMOS_D1_MINI32
    ; Wemos has different LED pin
    -DLED_BUILTIN=5

; Lower upload speed for stability with CH340 chip
upload_speed = 460800

; ============================================================================
; Development environment with debug features
; ============================================================================
[env:debug]
extends = env:esp32dev

; Debug build type
build_type = debug

; Debug-specific flags
build_flags = 
    ${env.build_flags}
    ; Enable debug output
    -DCORE_DEBUG_LEVEL=5
    -DRBDIMMER_DEBUG_LOG=1
    
    ; Debug symbols
    -g
    -ggdb
    
    ; No optimization for better debugging
    -O0

; Verbose upload for troubleshooting
upload_flags = -v

; ============================================================================
; Production environment with size optimization
; ============================================================================
[env:release]
extends = env:esp32dev

; Release build type
build_type = release

build_flags = 
    ${env.build_flags}
    ; Optimize for size
    -Os
    
    ; Remove debug code
    -DNDEBUG
    -DCORE_DEBUG_LEVEL=0
    
    ; Link-time optimization
    -flto

; Strip debug symbols to reduce size
build_unflags = -g -ggdb

; ============================================================================
; ESP-IDF framework environment (alternative to Arduino)
; ============================================================================
[env:espidf]
framework = espidf
board = esp32dev

; ESP-IDF specific settings
build_flags = 
    -DRBDIMMER_ESP_IDF=1

; ESP-IDF components
lib_deps = 
    ; Local path to rbdimmer as ESP-IDF component
    file://./components/rbdimmer

; ============================================================================
; Custom environment for specific project needs
; ============================================================================
[env:custom_project]
extends = env:esp32dev

; Project-specific configurations
build_flags = 
    ${env.build_flags}
    ; Custom pin definitions
    -DZERO_CROSS_PIN=18
    -DDIMMER_PIN=19
    
    ; Limit resources for this project
    -DRBDIMMER_MAX_CHANNELS=2
    -DRBDIMMER_MAX_PHASES=1
    
    ; Project identification
    -DPROJECT_NAME=\"MyDimmerProject\"
    -DPROJECT_VERSION=\"1.0.0\"

; WiFi credentials (example - use with caution!)
; Better to use build_flags or separate config file
; build_flags = 
;     -DWIFI_SSID=\"YourSSID\"
;     -DWIFI_PASSWORD=\"YourPassword\"

; ============================================================================
; Test environment for running unit tests
; ============================================================================
[env:test]
extends = env:esp32dev
build_flags = 
    ${env.build_flags}
    -DUNIT_TEST

; Additional test framework
lib_deps = 
    ${env.lib_deps}
    throwtheswitch/Unity@^2.5.2

; ============================================================================
; Environment for OTA (Over-The-Air) updates
; ============================================================================
[env:ota]
extends = env:esp32dev

; OTA upload settings
upload_protocol = espota
upload_port = 192.168.1.100  ; Change to your ESP32 IP
upload_flags = 
    --port=3232
    --auth=your_ota_password  ; Set your OTA password

; Larger partition scheme for OTA
board_build.partitions = ota.csv

build_flags = 
    ${env.build_flags}
    -DENABLE_OTA=1